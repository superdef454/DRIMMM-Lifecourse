"""update images

Revision ID: 6268a55bddfc
Revises: 799735942945
Create Date: 2024-04-21 14:01:06.815606

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import fastapi_storages
from fastapi_storages import FileSystemStorage
from fastapi_storages.integrations.sqlalchemy import FileType, ImageType


storage = FileSystemStorage(path="/media")

# revision identifiers, used by Alembic.
revision: str = '6268a55bddfc'
down_revision: Union[str, None] = '799735942945'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def _get_tables() -> sa.Table:
    meta = sa.MetaData(schema='public')
    meta.reflect(bind=op.get_bind())
    endpoint_table1 = sa.Table('university', meta)
    endpoint_table2 = sa.Table('agent', meta)
    endpoint_table3 = sa.Table('student', meta)

    return endpoint_table1, endpoint_table2, endpoint_table3

def upgrade() -> None:
    connection = op.get_bind()
    university, agent, student = _get_tables()
    data1 = connection.execute(university.select()).all()
    data2 = connection.execute(agent.select()).all()
    data3 = connection.execute(agent.select()).all()
    for element in data1:
        connection.execute(
            university
            .update()
            .where(university.c.id == element.id)
            .values(image='/media/default.jpg')
        )
    for element in data2:
        connection.execute(
            agent
            .update()
            .where(agent.c.id == element.id)
            .values(image='/media/default.jpg')
        )
    for element in data3:
        connection.execute(
            student
            .update()
            .where(student.c.id == element.id)
            .values(image='/media/default.jpg')
        )

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(None, 'event_type', ['title'])
    op.alter_column('university', 'image',
                    existing_type=postgresql.BYTEA(),
                    type_=fastapi_storages.integrations.sqlalchemy.ImageType(storage=storage),
                    existing_nullable=False)
    op.alter_column('agent', 'image',
               existing_type=postgresql.BYTEA(),
               type_=fastapi_storages.integrations.sqlalchemy.ImageType(storage=storage),
               existing_nullable=False)
    op.alter_column('student', 'image',
               existing_type=postgresql.BYTEA(),
               type_=fastapi_storages.integrations.sqlalchemy.ImageType(storage=storage),
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('student', 'image',
               existing_type=fastapi_storages.integrations.sqlalchemy.ImageType(storage=storage),
               type_=postgresql.BYTEA(),
               existing_nullable=False)
    op.alter_column('agent', 'image',
               existing_type=fastapi_storages.integrations.sqlalchemy.ImageType(storage=storage),
               type_=postgresql.BYTEA(),
               existing_nullable=False)
    op.alter_column('university', 'image',
                    existing_type=fastapi_storages.integrations.sqlalchemy.ImageType(storage=storage),
                    type_=postgresql.BYTEA(),
                    existing_nullable=False)
    op.drop_constraint(None, 'event_type', type_='unique')
    # ### end Alembic commands ###
